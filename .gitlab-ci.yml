image: docker:19.03.8

variables:
  DOCKER_DRIVER: overlay2
  BUILDER_TAG: index.docker.io/algorithmiahq/dev-center:latest
  IMAGE_TAG: index.docker.io/algorithmiahq/dev-center:$CI_COMMIT_SHA

services:
  - docker:18.09.7-dind

stages:
  - build
  - push
  - scan

before_script:
  - mkdir ~/.docker
  - echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json

#
# Build
#

build:
  except:
    variables:
      - $DEPENDENCY_CHECK == "true" # don't run a build when checking dependencies, because this will be based on a previously built sha
  stage: build
  image:
    name: docker:19.03.8
    entrypoint: [""]
  before_script:
    - mkdir ~/.docker
    - echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json
    # Prevent two images with the same tag from being deployed. The Webpack
    # assets from each build will be different, resulting in 404s as different
    # container versions handle requests meant for the other version.
    - docker pull $IMAGE_TAG && echo "An image with this tag has already been pushed." && exit 1
    - docker pull $BUILDER_TAG || true
  script:
    - docker build
      -t $BUILDER_TAG
      -t $IMAGE_TAG
      --file $CI_PROJECT_DIR/Dockerfile
      --no-cache
      --pull
      $CI_PROJECT_DIR
    - docker push $BUILDER_TAG
    - mkdir image
    - docker save $IMAGE_TAG > image/golduck.tar
  artifacts:
    paths:
      - image

#
# Push
#

push:
  except:
    variables:
      - $DEPENDENCY_CHECK == "true" # don't run a build when checking dependencies, because this will be based on a previously built sha
  stage: push
  image:
    name: docker:19.03.8
    entrypoint: [""]
  script:
    - docker load -i image/golduck.tar
    - docker push $IMAGE_TAG

osPackages:
  stage: scan
  image: algorithmiahq/vulnerability-scanner:latest
  services:
    - docker:18-dind
  rules:
    - if: '$DEPENDENCY_CHECK == "true"'
    - when: manual
      allow_failure: true
  script:
    - report-os-package-security-vulnerabilities $IMAGE_TAG UXENG 'Developer Center'

nodeCodeLibraries:
  stage: scan
  image: algorithmiahq/vulnerability-scanner:latest
  services:
    - docker:18-dind
  rules:
    - if: '$DEPENDENCY_CHECK == "true"'
    - when: manual
      allow_failure: true
  script:
    - report-node-security-vulnerabilities UXENG 'Developer Center'
