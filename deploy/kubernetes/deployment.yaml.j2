apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: algorithmia docs
  labels:
    app: docs-server
  name: docs-server
  namespace: {{ kubernetes_namespace }}
spec:
  replicas: 3
  minReadySeconds: 60  # Service refresh interval is 30s want to make sure nodes exist long enough to be propagated
  selector:
    matchLabels:
      app: docs-server
  template:
    metadata:
      annotations:
        description: algorithmia docs
      creationTimestamp: null
      labels:
        app: docs-server
      name: docs-server
    spec:
      # Prefer to not run on same node as another docs-server
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - docs-server
                topologyKey: kubernetes.io/hostname
              weight: 100
      nodeSelector:
        algorithmia.com/role: general
      containers:
      - name: docs
        ports:
        - containerPort: 4000
          name: nodejs
          protocol: TCP
        env:
        - name: NODE_ENV
          value: production
        - name: STAGE
          value: {{ stage }}
        - name: BASE_URL
          value: {{ domain_name }}
        - name: PROMETHEUS_TOKEN
          value: {{ secret_prometheus_token }}
        image: {{ service_docs_image }}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 250m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: 4000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: dockerhub
      restartPolicy: Always
      securityContext:
        runAsUser: 1001
      terminationGracePeriodSeconds: 30
