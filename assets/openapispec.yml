openapi: 3.0.0
info:
  title: Algorithmia Management APIs
  description: APIs for managing actions on the Algorithmia platform
  termsOfService: https://algorithmia.com/terms
  contact:
    name: Algorithmia Support Team
    url: https://algorithmia.com/contact
    email: support@algorithmia.com
  version: 1.5.1
externalDocs:
  description: Developer Center
  url: https://algorithmia.com/developers
servers:
- url: "https://api.algorithmia.com"
  variables:
    apiServerUrl:
      description: URL to send API requests to
      default: https://api.algorithmia.com
tags:
- name: algorithms
  description: Algorithm operations
- name: users
  description: User operations
- name: organizations
  description: Organization operations
- name: scm
  description: Source code management operations
- name: secrets
  description: Secret store operations
- name: connectors
  description: Data connector operations
- name: data
  description: Data API operations
- name: eventlisteners
  description: Event listener operations
- name: builds
  description: Algorithm build operations
- name: auth
  description: Authentication and API key management
- name: usage
  description: Platform usage information
- name: invites
  description: Platform invite code management
- name: admin
  description: Platform administration operations
- name: style
  description: Platform front-end style configuration
- name: frontend
  description: Platform front-end configuration
- name: registries
  description: Optional registries images for mirroring
paths:
  /v1/admin/insights-connection:
    get:
      tags:
      - connections
      summary: Get the currently configured Insights connection
      operationId: getConnection
      responses:
        "200":
          description: Response containing a Connection Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionConfiguration'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    post:
      tags:
      - connections
      summary: Set the Insights connection configuration
      operationId: updateConnection
      requestBody:
        $ref: '#/components/requestBodies/ConnectionConfigurationRequestBody'
      responses:
        "200":
          description: Response containing a Connection Configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionConfiguration'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - connections
      summary: Delete all configured Insights connections
      operationId: deleteAllConnections
      responses:
        "204":
          description: The configuration was deleted successfully.
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/invites:
    get:
      tags:
      - invites
      summary: Get a list of invite codes
      operationId: getInvites
      responses:
        "200":
          description: Invite code response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InviteCode'
    post:
      tags:
      - invites
      summary: Add an invite code
      operationId: addInvite
      requestBody:
        $ref: '#/components/requestBodies/InviteCodeRequestBody'
      responses:
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "200":
          description: The invite code was added successfully
  /v1/admin/invites/{invite_code}:
    delete:
      tags:
      - invites
      summary: Delete an invite code
      operationId: deleteInvite
      parameters:
      - name: invite_code
        in: path
        description: the invite code to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully deleted invite code
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/reservations:
    get:
      tags:
      - admin
      - reservations
      summary: List reservations
      operationId: getReservations
      responses:
        "200":
          description: Reservations response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    post:
      tags:
      - admin
      - reservations
      summary: Create a reservation
      operationId: createReservation
      requestBody:
        $ref: '#/components/requestBodies/ReservationCreateRequestBody'
      responses:
        "200":
          description: Successfully created the reservation
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/reservations/{reservation_id}:
    delete:
      tags:
      - admin
      - reservations
      summary: Delete a reservation
      operationId: deleteReservation
      parameters:
      - name: reservation_id
        in: path
        description: The reservation to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully deleted the reservation
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/usage:
    get:
      tags:
      - admin
      - usage
      summary: List usage information for users/orgs including caller
      description: Returns paginated algorithm usage information for a given date
        range for users and organizations on the cluster.
      operationId: getFullUsage
      parameters:
      - name: user
        in: query
        description: user or organization names
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: start_date
        in: query
        description: start date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: end_date
        in: query
        description: end date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page_size
        in: query
        description: maximum number of results to return in one query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Full usage report response to caller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUsageResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/usage/algorithms:
    get:
      tags:
      - admin
      - usage
      summary: List usage information for users/orgs by algorithm
      description: Returns paginated algorithm usage information for a given date
        range.
      operationId: getAlgorithmUsageResult
      parameters:
      - name: user
        in: query
        description: user or organization names
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: start_date
        in: query
        description: start date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: end_date
        in: query
        description: end date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page_size
        in: query
        description: maximum number of results to return in one query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Algorithm usage information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmUsageResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/legacy-algorithms:
    get:
      tags:
      - admin
      - usage
      summary: Get legacy algorithm usage information
      description: Returns usage information on legacy algorithms
      operationId: getLegacyAlgorithmiUsageResult
      responses:
        "200":
          description: Legacay Algorithm usage information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegacyAlgorithmUsageResult'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/usage/users:
    get:
      tags:
      - admin
      - usage
      summary: List algorithm usage information for users/orgs grouped by user/org
      operationId: getUserUsageResult
      parameters:
      - name: user
        in: query
        description: user or organization names
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: start_date
        in: query
        description: start date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: end_date
        in: query
        description: end date of query range in UTC format (2021-03-22T00:00:00.000Z)
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page_size
        in: query
        description: maximum number of results to return in one query
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: User usage information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUsageResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/features:
    get:
      tags:
      - admin
      summary: List available feature flags
      operationId: featureFlagList
      parameters:
      - name: username
        in: query
        description: The username of the user or organization
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Response with feature flag list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagList'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/features/{featureName}:
    put:
      tags:
      - admin
      summary: Enable/disable a feature flag globally
      operationId: toggleFeatureFlag
      parameters:
      - name: featureName
        in: path
        description: The name of the feature flag
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: username
        in: query
        description: The username of the user or organization
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/FeatureFlagToggle'
      responses:
        "204":
          description: Flag value updated.
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/organizations/{orgName}/algorithms-host-usernames:
    get:
      tags:
      - organizations
      summary: List AlgorithmHostUsername "algorithm-id / functional-id" pairs
      operationId: getHostUsernames
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Algorithm Host Username List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlgorithmHostUsername'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
      - CookieAuth: []
    put:
      tags:
      - organizations
      summary: Add a list of AlgorithmHostUsername "algorithm-id / functional-id"
        pairs
      operationId: setHostUsernames
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/HostUpdateRequestBody'
      responses:
        "204":
          description: Mappings were succesfully updated
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
      - CookieAuth: []
  /v1/organizations/{orgName}/algorithms-host-usernames/{algorithmId}:
    delete:
      tags:
      - organizations
      summary: Delete functional-ids associated with an algorithm
      operationId: deleteHostUsernames
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      responses:
        "204":
          description: Mappings were succesfully deleted
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
      - CookieAuth: []
  /v1/admin/organization_host_information:
    put:
      tags:
      - admin
      - organizations
      summary: Update an organization host information mapping
      operationId: update
      requestBody:
        $ref: '#/components/requestBodies/OrganizationHostInformation'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/admin/organization_host_information/{orgName}:
    get:
      tags:
      - admin
      - organizations
      summary: Get an organization host information mapping
      operationId: getByOrgName
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: OrganizationHostInformation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationHostInformation'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    post:
      tags:
      - admin
      - organizations
      summary: Create an organization host information mapping
      operationId: createOrganizationHostInformation
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateOrganizationHostInformation'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    delete:
      tags:
      - admin
      - organizations
      summary: Delete an organization host information mapping
      operationId: delete
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/admin/scms:
    post:
      tags:
      - admin
      - scm
      summary: Create an SCM configuration
      operationId: createScm
      requestBody:
        $ref: '#/components/requestBodies/ScmCreateRequestBody'
      responses:
        "201":
          description: Returns a single SCM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConfigurationResponseDto'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/scms/{scmId}:
    delete:
      tags:
      - admin
      - scm
      summary: Delete an SCM configuration
      description: "Note that at least one SCM (source code management) configuration\
        \ must be enabled at any given time. If the SCM configuration is currently\
        \ enabled, is being used by an algorithm, or is an \"internal\" SCM configuration,\
        \ this call will fail and an appropriate error code will be returned."
      operationId: deleteScm
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The SCM was deleted successfully.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    patch:
      tags:
      - admin
      - scm
      summary: Update an SCM configuration
      operationId: updateScm
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/ScmUpdateRequestBody'
      responses:
        "200":
          description: Returns a single SCM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConfigurationResponseDto'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/scms/{scmId}/default:
    post:
      tags:
      - admin
      - scm
      summary: Set an SCM configuration as the default
      description: "Sets the specified SCM (source code management) configuration\
        \ to be the default for the cluster and removes this designation from the\
        \ previous default SCM configuration. If the SCM configuration in question\
        \ is currently disabled, this call will fail."
      operationId: setDefaultScm
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The SCM was marked as the default.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/admin/secret-provider:
    get:
      tags:
      - admin
      - secrets
      summary: List secret providers
      operationId: adminListSecretProviders
      responses:
        "200":
          description: Provider Info response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderInfo'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - admin
      - secrets
      summary: Create a secret provider
      operationId: createSecretProvider
      requestBody:
        $ref: '#/components/requestBodies/SecretProviderRequestBody'
      responses:
        "200":
          description: Provider Info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/secret-provider/{providerId}:
    get:
      tags:
      - admin
      - secrets
      summary: Get a secret provider
      operationId: getSecretProvider
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: Provider Info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - admin
      - secrets
      summary: Update a secret provider
      operationId: updateProvider
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/SecretProviderRequestBody'
      responses:
        "200":
          description: Provider Info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderInfo'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    delete:
      tags:
      - admin
      - secrets
      summary: Delete a secret provider
      operationId: deleteProvider
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "204":
          description: The secret provider was deleted
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/users/{username}/keys:
    post:
      tags:
      - admin
      summary: Add a specific API key for a user
      operationId: importApiKey
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Response containing a generated API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/plugins/secret-provider/{providerId}:
    get:
      tags:
      - admin
      - secrets
      summary: Check if a .jar file has been uploaded for a secret provider
      operationId: checkSecretProviderForJar
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: A .jar file exists
        "400":
          description: A .jar file does not exists
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - admin
      - secrets
      summary: Upload a .jar file for a secret provider
      operationId: uploadJarForSecretProvider
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: The .jar was uploaded successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/admin/plugins/secret-provider/{providerId}/default:
    post:
      tags:
      - admin
      - secrets
      summary: Set a secret provider as the default
      operationId: setDefaultSecretProvider
      parameters:
      - name: providerId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "204":
          description: The secret provider was marked as the default
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/algo/{algorithmId}/{algoCallableVersion}:
    post:
      tags:
      - algorithms
      summary: Make a request to an algorithm by immutable identifier
      operationId: callAlgorithmById
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: algoCallableVersion
        in: path
        description: "The specific version of the algorithm you wish to call. May\
          \ be left blank, in which case the latest publicly published version will\
          \ be used.\nExamples:\n- `latestPrivate`: Resolves to the latest version\
          \ you have published privately.\n- `06147a5f7726757845d04d5b24b6e2b1c797fc74`:\
          \ Resolves to a specific hash version of your algorithm. Useful for testing\
          \ a specific algorithm build.\n- `1.1.1`: Fully specified semantic version.\n\
          - `1.2.*`: Specified to the minor version level. Will resolve to the latest\
          \ publicly published version with minor version of 1.2.\n- `1.*`:\tSpecified\
          \ to the major version level. Will resolve to the latest publicly published\
          \ version with major version of 1.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "(^$|latestPrivate|^[a-z0-9]?$|^\\d(\\.(\\d+|\\*))?(\\.(\\d+|\\\
            *))?$)"
          type: string
      - name: timeout
        in: query
        description: Specifies the amount of time in seconds to wait for the algorithm
          to respond before returning an error. Defaults to 300 (5 min.)
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 300
      - name: stdout
        in: query
        description: Specifies whether data passed to `stdout` during invocation should
          be returned to the caller. This parameter is only respected when the caller
          is the algorithm owner.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: output
        in: query
        description: "Allows customization of the response. `raw` signfies that you\
          \ wish the algorithm's response to be returned to you without a JSON wrapper,\
          \ while `void` signifies that you do not wish to wait for an algorithm response.\
          \ In the latter case, the call will return immediately once the invocation\
          \ has begun."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - raw
          - void
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/text:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Returns the result of invoking an algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmInvocationResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
  /v1/algo/{username}/{algoname}/{algoCallableVersion}:
    post:
      tags:
      - algorithms
      summary: Make a request to an algorithm
      description: This is the primary method to execute a request for an algorithm
      operationId: callAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: algoCallableVersion
        in: path
        description: "The specific version of the algorithm you wish to call. May\
          \ be left blank, in which case the latest publicly published version will\
          \ be used.\nExamples:\n- `latestPrivate`: Resolves to the latest version\
          \ you have published privately.\n- `06147a5f7726757845d04d5b24b6e2b1c797fc74`:\
          \ Resolves to a specific hash version of your algorithm. Useful for testing\
          \ a specific algorithm build.\n- `1.1.1`: Fully specified semantic version.\n\
          - `1.2.*`: Specified to the minor version level. Will resolve to the latest\
          \ publicly published version with minor version of 1.2.\n- `1.*`:\tSpecified\
          \ to the major version level. Will resolve to the latest publicly published\
          \ version with major version of 1.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "(^$|latestPrivate|^[a-z0-9]?$|^\\d(\\.(\\d+|\\*))?(\\.(\\d+|\\\
            *))?$)"
          type: string
      - name: timeout
        in: query
        description: Specifies the amount of time in seconds to wait for the algorithm
          to respond before returning an error. Defaults to 300 (5 min.)
        required: false
        style: form
        explode: true
        schema:
          type: number
          default: 300
      - name: stdout
        in: query
        description: Specifies whether data passed to `stdout` during invocation should
          be returned to the caller. This parameter is only respected when the caller
          is the algorithm owner.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: output
        in: query
        description: "Allows customization of the response. `raw` signfies that you\
          \ wish the algorithm's response to be returned to you without a JSON wrapper,\
          \ while `void` signifies that you do not wish to wait for an algorithm response.\
          \ In the latter case, the call will return immediately once the invocation\
          \ has begun."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - raw
          - void
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/text:
            schema:
              type: string
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Returns the result of invoking an algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmInvocationResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
  /v1/algorithms/{username}:
    get:
      tags:
      - algorithms
      summary: Get an algorithm
      operationId: getAlgorithmById
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    put:
      tags:
      - algorithms
      summary: Update an algorithm
      operationId: updateAlgorithmById
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateRequest'
      responses:
        "200":
          description: "Create, Update Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    post:
      tags:
      - algorithms
      summary: Create an algorithm
      operationId: createAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateRequest'
      responses:
        "201":
          description: "Create, Update Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}:
    get:
      tags:
      - algorithms
      summary: Get algorithm metadata
      operationId: getAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    put:
      tags:
      - algorithms
      summary: Update algorithm metadata
      operationId: updateAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateRequest'
      responses:
        "200":
          description: "Create, Update Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    delete:
      tags:
      - algorithms
      summary: Delete an algorithm
      operationId: deleteAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The algorithm was successfully deleted.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/builds:
    get:
      tags:
      - algorithms
      - builds
      summary: Get algorithm builds by algorithm ID
      operationId: getAlgorithmByIdBuilds
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Builds Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedBuildsList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/builds:
    get:
      tags:
      - algorithms
      - builds
      summary: Get algorithm builds by algorithm name
      operationId: getAlgorithmBuilds
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Builds Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedBuildsList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/builds/{buildid}:
    get:
      tags:
      - algorithms
      - builds
      summary: Get an algorithm build by algorithm ID and build ID
      operationId: getAlgorithmByIdBuildById
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: buildid
        in: path
        description: Build ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Build Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/builds/{buildid}:
    get:
      tags:
      - algorithms
      - builds
      summary: Get an algorithm build by algorithm name and build ID
      operationId: getAlgorithmBuildById
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: buildid
        in: path
        description: Build ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Build Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/builds/{buildid}/logs:
    get:
      tags:
      - algorithms
      - builds
      summary: Get algorithm build logs by algorithm ID and build ID
      operationId: getAlgorithmByIdBuildLogs
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: buildid
        in: path
        description: Build ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Build Logs Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildLogs'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/builds/{buildid}/logs:
    get:
      tags:
      - algorithms
      - builds
      summary: Get algorithm build logs by algorithm name and build ID
      operationId: getAlgorithmBuildLogs
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: buildid
        in: path
        description: Build ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Build Logs Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildLogs'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/compile:
    post:
      tags:
      - algorithms
      - builds
      summary: Compile an algorithm by algorithm ID
      description: "Compiles the latest available source code for an algorithm, resulting\
        \ in a new hash version of an algorithm available for publishing. For BitBucket\
        \ it's necessary to provide additional information in the request body."
      operationId: compileAlgorithmById
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      requestBody:
        $ref: '#/components/requestBodies/BuildRequest'
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/compile:
    post:
      tags:
      - algorithms
      - builds
      summary: Compile an algorithm by algorithm name
      description: "Compiles the latest available source code for an algorithm, resulting\
        \ in a new hash version of an algorithm available for publishing."
      operationId: compileAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/BuildRequest'
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/errors:
    get:
      tags:
      - algorithms
      summary: Get algorithm errors by algorithm ID
      operationId: getAlgorithmErrorsByAlgorithmId
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      responses:
        "200":
          description: List of algorithm errors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmErrorEntry'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/errors:
    get:
      tags:
      - algorithms
      summary: Get algorithm errors by algorithm name
      operationId: getAlgorithmErrorsByAlgorithmName
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of algorithm errors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmErrorEntry'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/log:
    get:
      tags:
      - algorithms
      - builds
      summary: List commits for a repository
      operationId: commitLogForRepository
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: since
        in: query
        description: The first commit SHA of the repository to list in the commits.
          This is included in the result list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: until
        in: query
        description: The last commit SHA of the repository to list in the commits.
          This is included in the result list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Log of commits to a repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryCommitLog'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/scm/status:
    get:
      tags:
      - algorithms
      - builds
      - scm
      summary: Get algorithm SCM provider connection status
      operationId: getAlgorithmScmConnectionStatus
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns information about an algorithm's connection to its
            backing SCM provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConnectionStatus'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/algorithms/{algorithmId}/scm/webhook:
    post:
      tags:
      - algorithms
      - scm
      summary: Receive SCM repository events by algorithm ID
      description: This endpoint is called exclusively by SCM providers who wish to
        inform us of changes to repositories backing algorithms.
      operationId: receiveAlgorithmByIdScmRepositoryEvent
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      requestBody:
        $ref: '#/components/requestBodies/ScmWebhookRequestBody'
      responses:
        "202":
          description: The incoming webhook is not actionable
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
        "204":
          description: Webhook received.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - GithubAuth: []
        GithubEventIdentification: []
      - XGitlabEvent: []
      - XBitbucketKey: []
  /v1/algorithms/{username}/{algoname}/scm/webhook:
    post:
      tags:
      - algorithms
      - scm
      summary: Receive SCM repository events by algorithm name
      description: This endpoint is called exclusively by SCM providers who wish to
        inform us of changes to repositories backing algorithms.
      operationId: receiveScmRepositoryEvent
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/ScmWebhookRequestBody'
      responses:
        "202":
          description: The incoming webhook is not actionable
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
        "204":
          description: Webhook received.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - GithubAuth: []
        GithubEventIdentification: []
      - XGitlabEvent: []
      - XBitbucketKey: []
  /v1/algorithms/{algorithmId}/versions:
    post:
      tags:
      - algorithms
      summary: Publish an algorithm's last successful build
      operationId: publishAlgorithmById
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      requestBody:
        $ref: '#/components/requestBodies/VersionRequest'
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/versions:
    get:
      tags:
      - algorithms
      summary: Get algorithm versions
      operationId: getAlgorithmVersions
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: published
        in: query
        description: Algorithm version's published state
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: callable
        in: query
        description: Algorithm version's callable visibility
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: "Create, Update Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedVersionsList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    post:
      tags:
      - algorithms
      summary: Publish an algorithm's last successful build
      operationId: publishAlgorithm
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/VersionRequest'
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/versions/{algohash}/registry:
    get:
      tags:
      - algorithms
      summary: Get the image push status of an algorithm
      operationId: GetAlgorithmImagePushStatus
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: algohash
        in: path
        description: Algorithm hash
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Algorithm Image Push Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagePushStatus'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    post:
      tags:
      - algorithms
      summary: Republish an algorithm
      operationId: RepublishAlgorithm
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: algohash
        in: path
        description: Algorithm hash
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/RegistryPublishAuthRequestBody'
      responses:
        "204":
          description: the operation completed successfully
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{username}/{algoname}/versions/{algohash}:
    get:
      tags:
      - algorithms
      summary: Get an algorithm by hash version
      operationId: getAlgorithmHashVersion
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: algoname
        in: path
        description: Algorithm name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: algohash
        in: path
        description: Algorithm hash
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Publish Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/algorithms/{algorithmId}/secrets:
    get:
      tags:
      - algorithms
      - secrets
      summary: Get all secrets for an algorithm
      operationId: getAlgorithmSecrets
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      responses:
        "200":
          description: Returns a list of AlgorithmSecrets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmSecretList'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
    post:
      tags:
      - algorithms
      - secrets
      summary: Create a secret for an algorithm
      operationId: createAlgorithmSecret
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      requestBody:
        $ref: '#/components/requestBodies/AlgorithmSecretCreateRequestBody'
      responses:
        "200":
          description: A secret object without the value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmSecretResult'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/algorithms/{algorithmId}/secrets/{secretId}:
    put:
      tags:
      - algorithms
      - secrets
      summary: Edit a secret for an algorithm
      operationId: editAlgorithmSecret
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: secretId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/AlgorithmSecretEditRequestBody'
      responses:
        "200":
          description: A secret object without the value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmSecretResult'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - algorithms
      - secrets
      summary: Delete a secret for an algorithm
      operationId: deleteAlgorithmSecret
      parameters:
      - name: algorithmId
        in: path
        description: Algorithm UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
          format: uuid
      - name: secretId
        in: path
        description: Secret UUID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "204":
          description: The secret was deleted successfully
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/config/favicon:
    get:
      tags:
      - style
      summary: Get favicon for the Algorithmia instance
      operationId: getFavicon
      responses:
        "200":
          description: Get user-uploaded custom favicon
        "303":
          description: Redirect to default Algorithmia favicon
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - style
      summary: Update favicon for the Algorithmia instance
      operationId: updateFavicon
      responses:
        "201":
          description: Favicon was updated successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - style
      summary: Delete favicon for the Algorithmia instance
      operationId: deleteFavicon
      responses:
        "204":
          description: Favicon was deleted successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/config/frontend:
    get:
      tags:
      - frontend
      summary: List front-end config entries
      operationId: getFrontendConfigEntries
      parameters:
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Response for all paginated list apis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/config/frontend/{keyname}:
    get:
      tags:
      - frontend
      summary: Get a front-end config entry
      operationId: getConfigEntry
      parameters:
      - name: keyname
        in: path
        description: The keyname for the config map entry
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 64
          pattern: "^[\\w][\\w-.]*[\\w]$"
          type: string
      responses:
        "200":
          description: Front-end config representation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrontendConfigurationEntry'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    put:
      tags:
      - frontend
      summary: Update or insert a front-end config entry
      operationId: updateConfigEntry
      parameters:
      - name: keyname
        in: path
        description: The keyname for the config map entry
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 64
          pattern: "^[\\w][\\w-.]*[\\w]$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/FrontendConfigurationEntry'
      responses:
        "200":
          description: Front-end config representation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrontendConfigurationEntry'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - frontend
      summary: Delete a front-end config entry
      operationId: deleteConfigEntry
      parameters:
      - name: keyname
        in: path
        description: The keyname for the config map entry
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 64
          pattern: "^[\\w][\\w-.]*[\\w]$"
          type: string
      responses:
        "204":
          description: The delete action was completed successfully.
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/config/logo:
    get:
      tags:
      - style
      summary: Get logo for the Algorithmia instance
      operationId: getLogo
      responses:
        "200":
          description: Get user-uploaded custom logo
        "303":
          description: Redirect to default Algorithmia logo
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - style
      summary: Update logo for the Algorithmia instance
      operationId: updateLogo
      responses:
        "201":
          description: Logo was updated successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - style
      summary: Delete logo for the Algorithmia instance
      operationId: deleteLogo
      responses:
        "204":
          description: Logo was deleted successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/connector/{connectorId}/{connectorPath}:
    get:
      tags:
      - connectors
      - data
      summary: Get file contents or directory listing
      operationId: getFileOrDirectory
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      - name: acl
        in: query
        description: Whether the ACL should be included in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Returns either a `directory` or raw file data, depending on\
            \ path specified"
          headers:
            X-Data-Type:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/FileType'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
            '*/*':
              schema:
                type: string
                format: binary
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
    put:
      tags:
      - connectors
      - data
      summary: Upload a file
      operationId: uploadFile
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/FileUploadRequestBody'
      responses:
        "200":
          description: Describes the location of a successfully uploaded file
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
    post:
      tags:
      - connectors
      - data
      summary: Create a directory
      operationId: createDirectory
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateDirectoryRequestBody'
      responses:
        "200":
          description: Describes the location of a successfully uploaded file
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - connectors
      - data
      summary: Delete a file or directory
      operationId: deleteFileOrDirectory
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      - name: force
        in: query
        description: "If you pass `true` for this parameter, will delete the directory\
          \ even if it contains files."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: "Returns the number of successful deletions under `result`,\
            \ and number of failed deletions under `error`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      deleted:
                        type: number
                  result:
                    type: object
                    properties:
                      deleted:
                        type: number
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
    head:
      tags:
      - connectors
      - data
      summary: Check if a file exists
      operationId: verifyFileExistence
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      responses:
        "200":
          description: File exists.
          headers:
            X-Data-Type:
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/FileType'
            X-Error-Message:
              description: "Should any errors occur finding the file, they will be\
                \ cited in this header."
              style: simple
              explode: false
              schema:
                type: string
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
    patch:
      tags:
      - connectors
      - data
      summary: Update a directory ACL
      description: "Update the ACL for an Algorithmia-hosted data collection. Note\
        \ that, at this time, this endpoint is not supported for any other connector\
        \ beyond Algorithmia's own hosted data solution."
      operationId: updateDirectoryAcl
      parameters:
      - name: connectorId
        in: path
        description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
          \ data, simply supply `data`. Otherwise, provide your connector's ID. A\
          \ connector's ID is represented as its connector type, the `+` character,\
          \ and its label (unless it is the default connector for its type, see below.)\
          \ Thus, a non-default S3 connector with the label \"test\" would be identified\
          \ as \"s3+test\".\nYou can use your default connector for a given storage\
          \ provider by passing the following identifiers:\n- `azureblob`: Your default\
          \ Azure Blob connector.\n- `dropbox`: Your default Dropbox connector, if\
          \ Dropbox is enabled for your Algorithmia instance.\n- `gs`: Your default\
          \ Google Cloud Storage connector.\n- `s3`: Your default AWS S3 connector.\n"
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
          type: string
      - name: connectorPath
        in: path
        description: Describes the file path you wish to operate on within your chosen
          data connector.
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^([^\\/]+\\/?)*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/DirectoryAclRequestBody'
      responses:
        "200":
          description: ACL updated. Response body is empty.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
  /v1/organizations:
    get:
      tags:
      - organizations
      summary: List organizations
      operationId: getOrganizations
      parameters:
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Response for all paginated list apis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    post:
      tags:
      - organizations
      summary: Create an organization
      description: Creates an organization. The calling user is automatically added
        as a member of the org and is granted org admin permissions.
      operationId: createOrganization
      requestBody:
        $ref: '#/components/requestBodies/Organization'
      responses:
        "200":
          description: Organization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organizations/{orgName}:
    get:
      tags:
      - organizations
      summary: Get an organization
      operationId: getOrganization
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Organization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    put:
      tags:
      - organizations
      summary: Update an organization
      operationId: edit
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/Organization'
      responses:
        "204":
          description: The Organization was updated
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    delete:
      tags:
      - organizations
      summary: Delete an organization
      operationId: deleteOrganization
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "204":
          description: The delete action was completed successfully
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organizations/{orgName}/keys:
    get:
      tags:
      - organizations
      summary: List API keys of organization members
      operationId: listKeys
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyList'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    post:
      tags:
      - organizations
      summary: Create an AlgorithmKey for an organization
      operationId: createKeyForOrganization
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateOrgApiKey'
      responses:
        "200":
          description: Response containing a generated API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
  /v1/organizations/{orgName}/members:
    get:
      tags:
      - organizations
      summary: List organization members
      operationId: listMembers
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Response for all paginated list apis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultList'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organizations/{orgName}/members/{username}:
    put:
      tags:
      - organizations
      summary: Add a user to an organization
      operationId: addOrganizationMember
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: The user was already a member of this organization
        "201":
          description: User was succesfully added to the organization
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    delete:
      tags:
      - organizations
      summary: Remove a user from an organization
      operationId: removeOrganizationMember
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "204":
          description: "User was successfully removed from the organization, was not\
            \ a member of the organization, or did not exist"
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organizations/{orgName}/members/{username}/keys:
    post:
      tags:
      - organizations
      summary: Create an organization-owned API key for a user
      operationId: addOrganizationApiKey
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateApiKey'
      responses:
        "201":
          description: Response containing a generated API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organization/types:
    get:
      tags:
      - organizations
      summary: List organization types
      operationId: getAllOrganizationTypes
      responses:
        "200":
          description: List of OrganizationType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeListResult'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - organizations
      summary: Create an organization type
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/OrganizationType'
      responses:
        "200":
          description: OrganizationType response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationType'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/organization/types/{orgTypeName}:
    delete:
      tags:
      - organizations
      summary: Remove an organization type
      operationId: deleteByName
      parameters:
      - name: orgTypeName
        in: path
        description: Organization Type name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "204":
          description: OrganizationTypeDeleted
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/organizations/{orgName}/utility-algorithms:
    get:
      tags:
      - algorithms
      - organizations
      summary: List utility algorithms
      operationId: getUtilityAlgorithms
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Returns a list of utility algorithms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmListResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/registries:
    get:
      tags:
      - registries
      summary: List registry configurations
      description: A registry configuration can be linked to algorithms.
      operationId: get
      responses:
        "200":
          description: A list of all registries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryWithoutAuth'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
    post:
      tags:
      - registries
      summary: Add a new registry configuration
      description: A registry configuration can be linked to algorithms.
      operationId: createRegistry
      requestBody:
        $ref: '#/components/requestBodies/CreateRegistryRequest'
      responses:
        "200":
          description: A configured registry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryWithoutAuth'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/registries/{registryId}:
    put:
      tags:
      - registries
      summary: Update a registry configuration
      description: A registry configuration can be linked to algorithms.
      operationId: updateRegistry
      parameters:
      - name: registryId
        in: path
        description: Registry ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateRegistryRequest'
      responses:
        "200":
          description: A configured registry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryWithoutAuth'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    delete:
      tags:
      - registries
      summary: Delete a registry
      description: A registry configuration can be linked to algorithms.
      operationId: deleteRegistry
      parameters:
      - name: registryId
        in: path
        description: Registry ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Registry deleted
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/scms:
    get:
      tags:
      - scm
      summary: List SCM configurations
      description: List SCM (source code management) provider configurations for the
        Algorithmia instance
      operationId: listScms
      responses:
        "200":
          description: Returns a list of SCMs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScmConfigurationResponseDto'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/scms/{scmId}:
    get:
      tags:
      - scm
      summary: Get SCM configuration information
      description: Retrieve information about a single SCM (source code management)
        configuration by its ID
      operationId: getScm
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns a single SCM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmConfigurationResponseDto'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/scms/{scmId}/oauth/start:
    get:
      tags:
      - scm
      summary: Initiate SCM configuration authorization
      description: "Applies only to SCM (source code management) providers that leverage\
        \ an OAuth authorization flow. Allows a user to begin the OAuth authorization\
        \ flow for a given SCM configuration, thereby allowing Algorithmia to access\
        \ any necessary SCM provider resources, such as repositories, deploy keys,\
        \ and webhooks, on their behalf."
      operationId: initiateScmAuthorization
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "303":
          description: Indicates the URL the user should follow to begin the OAuth
            process.
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
  /v1/scms/{scmId}/oauth/finish:
    get:
      tags:
      - scm
      summary: Complete SCM configuration authorization
      description: "Applies only to SCM (source code management) providers that leverage\
        \ an OAuth authorization flow. Once a user has successfully authorized with\
        \ the SCM provider's authorization server, said server will call this endpoint\
        \ and supply the authorization code as a query parameter."
      operationId: completeScmAuthorization
      parameters:
      - name: code
        in: query
        description: OAuth authorization code which we will be exchanged for an access
          token.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User connected
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
  /v1/scms/{scmId}/oauth/status:
    get:
      tags:
      - scm
      summary: Get SCM configuration authorization status
      description: "Applies only to SCM (source code management) providers that leverage\
        \ an OAuth authorization flow. If the calling user has completed the authorization\
        \ flow for the SCM configuration in question, this endpoint describes the\
        \ SCM username that represents the user, as well as any organizations they\
        \ have access to. If the calling user has not completed the authorization\
        \ flow, we return an `authorization_status` of `unauthorized`."
      operationId: getScmStatus
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns information about a user's authorization status for
            the given SCM configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmUserOAuthStatus'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/scms/{scmId}/oauth/revoke:
    post:
      tags:
      - scm
      summary: Revoke SCM configuration authorization
      description: "Applies only to SCM (source code management) providers that leverage\
        \ an OAuth authorization flow. If the calling user has completed the authorization\
        \ flow for the SCM configuration in question, this endpoint prompts us to\
        \ invalidate and discard said access token. After this has occurred, all algorithms\
        \ created by the user will continue to function, but the user will no longer\
        \ be able to create algorithms backed by the SCM configuration."
      operationId: revokeScmAuthorization
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Access token revoked.
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/scms/{scmId}/token/connect:
    post:
      tags:
      - scm
      summary: Create SCM authorized connection
      operationId: addScmConnection
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Authorization successful.
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/scms/{scmId}/token/status:
    get:
      tags:
      - scm
      summary: Get SCM authorization status
      operationId: scmTokenStatus
      parameters:
      - name: scmId
        in: path
        description: SCM ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns information about a user's authorization status for
            the given SCM configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmUserOAuthStatus'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/secret-provider:
    get:
      tags:
      - secrets
      summary: List secret providers
      operationId: listSecretProviders
      responses:
        "200":
          description: Provider Info response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderInfo'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
  /v1/users:
    get:
      tags:
      - users
      summary: List users
      operationId: getUsers
      parameters:
      - name: limit
        in: query
        description: The number of results to return in a single page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
      - name: marker
        in: query
        description: Encoded pagination cursor
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Response for all paginated list apis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    post:
      tags:
      - users
      summary: Create a user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/users/{username}:
    get:
      tags:
      - users
      summary: Get a user
      operationId: getUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    put:
      tags:
      - users
      summary: Update a user
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
    delete:
      tags:
      - users
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "204":
          description: The delete action was completed successfully.
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - AdminApiKeyAuth: []
  /v1/users/{username}/algorithms:
    get:
      tags:
      - algorithms
      summary: List algorithms for a user or organization
      operationId: listAlgorithmsForUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: Returns a list of utility algorithms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmListResult'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
  /v1/users/{username}/connectors:
    post:
      tags:
      - connectors
      summary: Create a connector
      description: Creates a data connector for a user.
      operationId: createConnectorForUserById
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/ConnectorCreateRequestBody'
      responses:
        "200":
          description: Response containing a Connector
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "409":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
      - AdminApiKeyAuth: []
  /v1/users/{userId}/errors:
    get:
      tags:
      - algorithms
      summary: Get algorithm errors for a user
      operationId: getAlgorithmErrorsByUserId
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: List of algorithm errors response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmErrorEntry'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - ApiKeyAuth: []
  /v1/users/{userId}/event-listeners:
    get:
      tags:
      - eventlisteners
      summary: List event listeners configured for a user
      operationId: getEventListenersForUserById
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: Response for all paginated list apis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultList'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    post:
      tags:
      - eventlisteners
      summary: Create an event listener for a user
      operationId: postEventListenersForUserById
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/EventListenerBody'
      responses:
        "200":
          description: Event Listener Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListener'
        "400":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/users/{userId}/event-listeners/{eventListenerId}:
    get:
      tags:
      - eventlisteners
      summary: Get an event listener configured for a user
      operationId: getEventListenerByIdForUserById
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      - name: eventListenerId
        in: path
        description: The ID of an event listener
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: Event Listener Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListener'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    put:
      tags:
      - eventlisteners
      summary: Update an event listener configured for a user
      operationId: updateEventListenerForUserById
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      - name: eventListenerId
        in: path
        description: The ID of an event listener
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: Event Listener Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListener'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "404":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
    delete:
      tags:
      - eventlisteners
      summary: Delete an event listener configured for a user
      operationId: deleteEventListenerForUserById
      parameters:
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      - name: eventListenerId
        in: path
        description: The ID of an event listener
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      responses:
        "200":
          description: The delete action was completed successfully.
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "500":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
  /v1/users/{username}/keys:
    get:
      tags:
      - auth
      summary: List API keys for a user
      operationId: getKeysForUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      responses:
        "200":
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyList'
      security:
      - CookieAuth: []
    post:
      tags:
      - auth
      summary: Create an API key for a user
      operationId: createKeyForUser
      parameters:
      - name: username
        in: path
        description: The username of the user or organization
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateApiKey'
      responses:
        "200":
          description: Response containing a generated API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
  /v1/users/{userId}/notifications:
    get:
      tags:
      - notifications
      summary: Get notifications for a user
      operationId: getUserNotifications
      parameters:
      - name: event_types
        in: query
        description: The notification types wanted
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: comma-seperated
      - name: userId
        in: path
        description: The user's ID
        required: true
        style: simple
        explode: false
        schema:
          pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
          type: string
      - name: limit
        in: query
        description: Limits the number of results 1-100
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: since
        in: query
        description: Limits the results to after the date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: Notification response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationContext'
        "401":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        "403":
          description: Error response for all non-200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      security:
      - CookieAuth: []
      - AdminApiKeyAuth: []
components:
  schemas:
    UtilityAlgorithm:
      type: object
      properties:
        id:
          type: string
          format: uuid
        algoname:
          type: string
        username:
          type: string
      description: Result of getting an algorithm from the db for utilities
    AlgorithmCallability:
      type: string
      enum:
      - public
      - private
    AlgorithmSecretCreateRequest:
      required:
      - description
      - id
      - owner_id
      - owner_type
      - secretKey
      - short_name
      type: object
      properties:
        short_name:
          type: string
        description:
          type: string
        owner_type:
          type: string
        owner_id:
          type: string
          format: uuid
        secret_key:
          type: string
        secret_value:
          type: string
        provider_id:
          type: string
    AlgorithmSecretEditRequest:
      required:
      - description
      - id
      - secretKey
      - short_name
      type: object
      properties:
        short_name:
          type: string
        description:
          type: string
        secret_key:
          type: string
        secret_value:
          type: string
    AlgorithmSecretList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmSecretResult'
    AlgorithmSecretResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        short_name:
          type: string
        description:
          type: string
        owner_type:
          type: string
        owner_id:
          type: string
          format: uuid
        default_secret_value_id:
          type: string
          format: uuid
        provider_id:
          type: string
          format: uuid
    AlgorithmAsynchronousInvocationResult:
      required:
      - async
      - request_id
      type: object
      properties:
        async:
          type: boolean
        request_id:
          type: string
      description: "Result of calling a specific algorithm as an asynchronous operation,\
        \ e.g. by passing the `output` query parameter set to `void`."
    AlgorithmErrorEntry:
      type: object
      properties:
        logs:
          type: string
          readOnly: true
      description: A single algorithm error response
    AlgorithmHostUsername:
      required:
      - algorithm_id
      - functional_id
      type: object
      properties:
        algorithm_id:
          type: string
        functional_id:
          type: string
    AlgorithmHostUsernameUpdates:
      type: object
      properties:
        updates:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmHostUsername'
    AlgorithmInvocationResult:
      oneOf:
      - $ref: '#/components/schemas/AlgorithmAsynchronousInvocationResult'
      - $ref: '#/components/schemas/AlgorithmSynchronousInvocationResult'
    AlgorithmSynchronousInvocationResultOneOf:
      description: Wrapper object AlgorithmSynchronousInvocationResult
      oneOf:
      - type: string
      - type: object
    AlgorithmSynchronousInvocationResult:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
            stacktrace:
              type: string
        metadata:
          required:
          - duration
          type: object
          properties:
            content_type:
              type: string
              enum:
              - binary
              - json
              - text
              - void
            duration:
              type: number
            stdout:
              type: string
        result:
          $ref: '#/components/schemas/AlgorithmSynchronousInvocationResultOneOf'
      description: Result of calling a specific algorithm as a synchronous operation.
    ApiKeyList:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiKey:
      required:
      - api_key
      - api_key_mask
      - created_at
      - key_label
      - key_type
      - username
      type: object
      properties:
        username:
          type: string
        key_label:
          type: string
        created_at:
          type: string
          format: date-time
        api_key_mask:
          type: string
        api_key:
          type: string
        key_type:
          $ref: '#/components/schemas/ApiKeyType'
        permissions:
          $ref: '#/components/schemas/AuthPermissions'
        owner_name:
          type: string
    ApiKeyCreation:
      required:
      - key_type
      type: object
      properties:
        key_label:
          type: string
        key_type:
          $ref: '#/components/schemas/ApiKeyType'
        permissions:
          $ref: '#/components/schemas/AuthPermissions'
    ApiKeyType:
      type: string
      enum:
      - ManagementKey
      - PlatformAdminKey
      - AlgorithmKey
    AuthPermissions:
      required:
      - algo_acl
      - allow_algo
      - allow_data
      - allow_data_write
      - allow_web_algo
      type: object
      properties:
        allow_data:
          type: boolean
        allow_data_write:
          type: boolean
        allow_algo:
          type: boolean
        allow_web_algo:
          type: boolean
        referer_host:
          type: string
        allow_algo_management:
          type: boolean
        algo_acl:
          type: array
          items:
            type: string
    Build:
      required:
      - build_id
      - commit_sha
      - started_at
      - status
      type: object
      properties:
        status:
          type: string
          readOnly: true
          enum:
          - in-progress
          - succeeded
          - failed
        build_id:
          type: string
          readOnly: true
        commit_sha:
          type: string
          readOnly: true
        started_at:
          type: string
          format: date-time
          readOnly: true
        finished_at:
          type: string
          format: date-time
          readOnly: true
        resource_type:
          type: string
          readOnly: true
        version_info:
          $ref: '#/components/schemas/BuildVersionInfo'
        registry_status:
          $ref: '#/components/schemas/ImagePushStatus'
    BuildLogs:
      type: object
      properties:
        logs:
          type: string
          readOnly: true
    BuildVersionInfo:
      required:
      - semantic_version
      type: object
      properties:
        semantic_version:
          type: string
          readOnly: true
    Commit:
      required:
      - author
      - id
      - message
      - short_message
      type: object
      properties:
        id:
          type: string
        short_message:
          type: string
        message:
          type: string
        author:
          type: string
      description: Individual commit to a repository
    Compilation:
      required:
      - successful
      type: object
      properties:
        successful:
          type: boolean
          readOnly: true
        output:
          type: string
          readOnly: true
    ConnectionConfiguration:
      required:
      - broker_url
      - topic
      type: object
      properties:
        broker_url:
          type: string
        topic:
          type: string
        broker_username:
          type: string
        broker_password:
          type: string
        ca_certificate:
          type: string
        sasl_mechanism:
          type: string
        id:
          type: string
          format: uuid
    Connector:
      required:
      - cred_data
      - cred_type
      - protocol
      - username
      type: object
      properties:
        username:
          type: string
        label:
          type: string
        protocol:
          type: string
          enum:
          - s3
          - dropbox
          - azureblob
          - gs
        is_default:
          type: boolean
        cred_data:
          type: string
          enum:
          - IAMConnectorCredential
          - SASConnectorCredential
          - ServiceAccountConnectorCredential
          - OAuthConnectorCredential
        cred_type:
          type: string
          enum:
          - iam
          - oauth
          - sas
          - serviceaccount
        path:
          type: string
          default: '*'
        writeable:
          type: boolean
          default: false
    IAMConnectorCredential:
      required:
      - access_key_id
      - secret_access_key
      type: object
      properties:
        access_key_id:
          type: string
        secret_access_key:
          type: string
    ImagePushStatus:
      required:
      - status
      - updated_at
      type: object
      properties:
        status:
          type: string
        updated_at:
          type: string
          format: date-time
        status_message:
          type: string
        registry_id:
          type: string
    RegistryPublishAuth:
      required:
      - registry_id
      type: object
      properties:
        registry_username:
          type: string
        registry_password:
          type: string
        registry_id:
          type: string
    SASConnectorCredential:
      required:
      - container_name
      - sas_token
      - storage_uri
      type: object
      properties:
        storage_uri:
          type: string
        sas_token:
          type: string
        container_name:
          type: string
    ServiceAccountConnectorCredential:
      required:
      - email
      - private_key
      - private_key_id
      type: object
      properties:
        email:
          type: string
        private_key_id:
          type: string
        private_key:
          type: string
    OAuthConnectorCredential:
      required:
      - access_token
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    BuildRequest:
      type: object
      properties:
        sshPrivateKey:
          type: string
        commitSha:
          type: string
        registry_push_credentials:
          $ref: '#/components/schemas/RegistryPublishAuth'
    ConnectorResponse:
      type: object
      properties:
        connector_id:
          type: string
        username:
          type: string
        label:
          type: string
        protocol:
          type: string
          enum:
          - s3
          - dropbox
          - azureblob
          - gs
        is_default:
          type: boolean
        permissions:
          type: array
          items:
            type: string
    SCMSUserPassOrSecretToken:
      description: One of object for SCM credentials for create request
      oneOf:
      - $ref: '#/components/schemas/SCMSUserPass'
      - $ref: '#/components/schemas/SCMSSecretToken'
    CreateRequest:
      required:
      - details
      - name
      - settings
      type: object
      properties:
        name:
          type: string
        details:
          $ref: '#/components/schemas/Details'
        settings:
          $ref: '#/components/schemas/SettingsMandatory'
        source:
          $ref: '#/components/schemas/SourceCreate'
        scmsCredentials:
          $ref: '#/components/schemas/SCMSUserPassOrSecretToken'
        version_info:
          type: object
          properties:
            sample_input:
              type: string
    Details:
      required:
      - label
      type: object
      properties:
        summary:
          type: string
        label:
          type: string
        tagline:
          type: string
    Environment:
      type: string
      enum:
      - cpu
      - gpu
    EventListener:
      required:
      - algoName
      - algoOwner
      - algoVersion
      - credentials
      - sourceType
      - sourceURI
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sourceType:
          $ref: '#/components/schemas/EventListenerSourceType'
        sourceURI:
          maxLength: 255
          type: string
        algoName:
          maxLength: 255
          type: string
        algoOwner:
          maxLength: 255
          type: string
        algoVersion:
          maxLength: 255
          type: string
        algoTimeoutSeconds:
          type: integer
          default: 420
        listenerOwner:
          maxLength: 255
          type: string
          readOnly: true
        credentials:
          maxLength: 255
          type: string
    EventListenerRequest:
      required:
      - algoName
      - algoOwner
      - credentials
      - sourceType
      - sourceURI
      type: object
      properties:
        algoName:
          maxLength: 255
          type: string
        algoOwner:
          maxLength: 255
          type: string
        algoVersion:
          maxLength: 255
          type: string
        algoTimeoutSeconds:
          type: integer
          default: 420
        credentials:
          maxLength: 255
          type: string
        sourceType:
          $ref: '#/components/schemas/EventListenerSourceType'
        sourceURI:
          maxLength: 255
          type: string
    EventListenerSourceType:
      type: string
      enum:
      - AmazonSQS
      - AzureSB
    FeatureFlagToggle:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
    FullUsageRow:
      required:
      - algorithm_called
      - algorithm_owner
      - algorithm_version
      - caller
      - machine_type
      - total_calls
      - total_duration
      - total_error_duration
      - total_errors
      type: object
      properties:
        algorithm_called:
          type: string
        caller:
          type: string
        algorithm_version:
          type: string
        total_calls:
          type: string
        algorithm_owner:
          type: string
        total_errors:
          type: integer
          format: int64
        total_error_duration:
          type: number
          format: double
        total_duration:
          type: number
          format: double
        machine_type:
          type: string
          enum:
          - cpu
          - gpu
    UserUsageRow:
      required:
      - caller
      - total_calls
      - total_duration
      - total_error_duration
      - total_errors
      type: object
      properties:
        caller:
          type: string
        total_calls:
          type: string
        total_errors:
          type: integer
          format: int64
        total_error_duration:
          type: number
          format: double
        total_duration:
          type: number
          format: double
    AlgorithmUsageRow:
      required:
      - algorithm_called
      - algorithm_owner
      - algorithm_version
      - machine_type
      - total_calls
      - total_duration
      - total_error_duration
      - total_errors
      type: object
      properties:
        algorithm_called:
          type: string
        algorithm_version:
          type: string
        total_calls:
          type: string
        algorithm_owner:
          type: string
        total_errors:
          type: integer
          format: int64
        total_error_duration:
          type: number
          format: double
        total_duration:
          type: number
          format: double
        machine_type:
          type: string
          enum:
          - cpu
          - gpu
    LegacyAlgorithmUsageRow:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        algoname:
          type: string
        language:
          type: string
        createdAt:
          type: string
          format: date-time
        lastCompiledAt:
          type: string
          format: date-time
    Directory:
      type: object
      properties:
        acl:
          $ref: '#/components/schemas/DirectoryAcl'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
        marker:
          type: string
    DirectoryAcl:
      type: object
      properties:
        read:
          type: array
          items:
            type: string
            enum:
            - user://*
            - algo://.my/*
      description: "Specifies who may access the data in this directory. `user://*`\
        \ signifies all users may read from this directory, whereas `algo://.my/*`\
        \ signifies only the directory owner's algorithms may access the data (no\
        \ matter the caller of the algorithm). An empty array signifies only the directory\
        \ owner themselves may access the data."
    CreateDirectoryRequest:
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ResourceName'
        acl:
          $ref: '#/components/schemas/DirectoryAcl'
    DirectoryAclUpdateRequest:
      required:
      - acl
      type: object
      properties:
        acl:
          $ref: '#/components/schemas/DirectoryAcl'
    File:
      required:
      - filename
      - last_modified
      - size
      type: object
      properties:
        filename:
          type: string
        last_modified:
          type: string
          format: date-time
        size:
          type: number
    FileType:
      type: string
      description: Describes whether a returned entity contains a file or a directory.
      enum:
      - file
      - directory
    Folder:
      required:
      - name
      type: object
      properties:
        name:
          type: string
    FullUsageResult:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/FullUsageRow'
        next_marker:
          type: string
    UserUsageResult:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserUsageRow'
        next_marker:
          type: string
    AlgorithmUsageResult:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmUsageRow'
        next_marker:
          type: string
    LegacyAlgorithmUsageResult:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/LegacyAlgorithmUsageRow'
    AlgorithmListResult:
      type: array
      items:
        $ref: '#/components/schemas/UtilityAlgorithm'
    OrganizationTypeListResult:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationType'
    Error:
      required:
      - code
      - message
      type: object
      properties:
        id:
          type: string
        code:
          type: integer
          enum:
          - 1000
          - 1001
          - 1002
          - 1003
          - 1004
          - 1005
          - 1006
          - 1007
          - 1008
          - 1009
          - 1010
          - 1011
          - 1012
          - 1013
          - 1014
          - 1015
          - 1016
          - 1017
          - 2001
          - 2002
          - 2011
          - 2012
          - 2013
          - 2014
          - 2015
          - 2016
          - 2017
          - 2018
          - 3000
          - 3001
          - 3003
          - 3004
          - 3005
          - 3007
          - 3008
          - 3009
          - 3010
          - 3100
          - 3101
          - 3102
          - 3103
          - 3104
          - 3105
          - 3106
          - 3107
          - 3108
          - 3109
          - 3110
          - 3300
          - 3301
          - 3302
          - 4001
          - 4002
          - 4003
          - 4004
          - 4005
          - 4006
          - 4007
          - 4008
          - 4009
          - 4020
          - 4021
          - 4040
          - 4041
          - 4042
          - 4043
          - 4044
          - 4045
          - 4050
          - 4051
          - 4052
          - 4070
          - 4080
          - 4081
          - 4082
          - 4083
          - 4084
          - 5001
          - 5002
          - 5003
          - 5004
          - 6001
          - 8000
          - 8001
          - 8002
          - 8003
          - 8004
          - 8005
          - 8006
          - 8007
          - 8008
          - 8009
          - 8010
          - 8011
          - 8012
          - 8013
          - 8014
          - 8060
          - 8061
        message:
          type: string
    FeatureFlagList:
      type: array
      items:
        $ref: '#/components/schemas/FeatureFlag'
    FeatureFlag:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
    FrontendConfigurationEntry:
      required:
      - keyname
      - resource_type
      - value
      type: object
      properties:
        keyname:
          type: string
        value:
          type: string
        created_at:
          type: number
          readOnly: true
        updated_at:
          type: number
          readOnly: true
        resource_type:
          type: string
          readOnly: true
    HashResponse:
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 36
          type: string
          description: An immutable UUID which can be used to execute an algorithm.
        name:
          type: string
        details:
          $ref: '#/components/schemas/Details'
        settings:
          $ref: '#/components/schemas/Settings'
        source:
          $ref: '#/components/schemas/Source'
        self_link:
          type: string
    NewInviteCode:
      required:
      - inviteCode
      type: object
      properties:
        inviteCode:
          type: string
        signupCredits:
          type: integer
        comments:
          type: string
        expiresAt:
          type: string
    InviteCode:
      type: object
      properties:
        inviteCode:
          type: string
        signupCredits:
          type: integer
        comments:
          type: string
        expiresAt:
          type: string
        createdAt:
          type: string
        createdBy:
          type: string
    ConnectionConfigurationRequest:
      oneOf:
      - $ref: '#/components/schemas/KafkaSaslSslConnectionConfiguration'
      - $ref: '#/components/schemas/KafkaPlaintextUnauthenticatedConnectionConfiguration'
    KafkaPlaintextUnauthenticatedConnectionConfiguration:
      required:
      - broker_url
      - connection_type
      - topic
      type: object
      properties:
        connection_type:
          type: string
          enum:
          - kafka_sasl_ssl
          - kafka_unauthenticated_plaintext
        broker_url:
          type: string
        topic:
          type: string
        id:
          type: string
          format: uuid
    KafkaSaslSslConnectionConfiguration:
      required:
      - broker_password
      - broker_url
      - broker_username
      - connection_type
      - topic
      type: object
      properties:
        connection_type:
          type: string
          enum:
          - kafka_sasl_ssl
          - kafka_unauthenticated_plaintext
        broker_url:
          type: string
        topic:
          type: string
        broker_username:
          type: string
        broker_password:
          type: string
        ca_certificate:
          type: string
        sasl_mechanism:
          type: string
          enum:
          - SCRAM-SHA-256
          - SCRAM-SHA-512
          - PLAIN
        id:
          type: string
          format: uuid
    License:
      type: string
      enum:
      - apl
      - apache2
      - gpl3
      - mit
    Language:
      type: string
      enum:
      - java
      - javascript
      - python2-langpack
      - python3-1
      - r
      - ruby
      - rust
      - scala
    NetworkAccess:
      type: string
      enum:
      - isolated
      - full
    Notification:
      required:
      - created_at
      - notification_context
      - notification_id
      - notification_type
      type: object
      properties:
        notification_id:
          maxLength: 100
          type: string
          format: uuid
        notification_type:
          type: string
        created_at:
          type: string
          format: date-time
        read_at:
          type: string
          format: date-time
        notification_context:
          $ref: '#/components/schemas/NotificationContext'
    NotificationContext:
      required:
      - algoname
      - algorithm_id
      - username
      type: object
      properties:
        algorithm_id:
          maxLength: 100
          type: string
          format: uuid
        username:
          type: string
        algoname:
          type: string
        semantic_version:
          type: integer
    Organization:
      required:
      - org_contact_name
      - org_email
      - org_label
      - org_name
      - type_id
      type: object
      properties:
        org_name:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
        org_email:
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$"
          type: string
        org_label:
          maxLength: 100
          type: string
        org_contact_name:
          maxLength: 100
          type: string
        org_url:
          maxLength: 100
          type: string
        type_id:
          maxLength: 100
          type: string
          format: uuid
        self_link:
          type: string
          readOnly: true
        resource_type:
          type: string
          readOnly: true
        stripe_customer_id:
          type: string
        owner_ids:
          type: array
          items:
            type: string
            format: uuid
    OrganizationApiKeyCreation:
      required:
      - key_label
      - permissions
      type: object
      properties:
        key_label:
          type: string
        permissions:
          $ref: '#/components/schemas/AuthPermissions'
    OrganizationHostInformation:
      required:
      - host_user_id
      - host_username
      - org_id
      type: object
      properties:
        id:
          type: string
          format: uuid
        org_id:
          type: string
          format: uuid
        host_username:
          type: string
        host_user_id:
          type: string
    CreateOrganizationHostInformation:
      required:
      - host_user_id
      - host_username
      type: object
      properties:
        host_username:
          type: string
        host_user_id:
          type: string
    OrganizationType:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    OrganizationMember:
      required:
      - resource_type
      - role
      - user_link
      - username
      type: object
      properties:
        username:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
        role:
          type: string
          enum:
          - owner
          - member
          - invited
          - unknown
        user_link:
          type: string
          readOnly: true
        resource_type:
          type: string
          readOnly: true
    PagedBuildsList:
      type: object
      properties:
        next_link:
          type: string
        marker:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/Build'
      description: Paged Algorthm Builds List
    PagedResultListObjects:
      description: Objects that can be paged over
      oneOf:
      - $ref: '#/components/schemas/EventListener'
      - $ref: '#/components/schemas/FrontendConfigurationEntry'
      - $ref: '#/components/schemas/Organization'
      - $ref: '#/components/schemas/OrganizationMember'
      - $ref: '#/components/schemas/User'
    PagedResultList:
      type: object
      properties:
        next_link:
          type: string
        marker:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/PagedResultListObjects'
    PagedVersionsList:
      type: object
      properties:
        next_link:
          type: string
        marker:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/VersionResponse'
      description: Paged Algorthm Versions List Response
    ProviderInfo:
      required:
      - description
      - factoryClassName
      - interfaceVersion
      - isDefault
      - isEnabled
      - moduleName
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        moduleName:
          type: string
        factoryClassName:
          type: string
        interfaceVersion:
          type: string
        isEnabled:
          type: boolean
        isDefault:
          type: boolean
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
      description: A single ProviderInfo object
    RegistryCreate:
      required:
      - registry_url
      type: object
      properties:
        name:
          maxLength: 32
          type: string
        registry_url:
          maxLength: 128
          type: string
        registry_username:
          maxLength: 64
          type: string
        registry_password:
          maxLength: 64
          type: string
      description: Details for creating a registry
    RegistryUpdate:
      required:
      - registry_url
      type: object
      properties:
        name:
          maxLength: 32
          type: string
        registry_url:
          maxLength: 128
          type: string
        registry_username:
          maxLength: 64
          type: string
        registry_password:
          maxLength: 64
          type: string
      description: Details for updating a registry
    RegistryWithoutAuth:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        name:
          maxLength: 32
          type: string
        registry_url:
          maxLength: 128
          type: string
      description: A registry without the authentication information
    RepositoryCommitLog:
      required:
      - commits
      type: object
      properties:
        commits:
          type: array
          items:
            $ref: '#/components/schemas/Commit'
      description: Log of commits to a repository
    Reservation:
      required:
      - algo_id
      - algoname
      - algorithm_id
      - num_slots
      - reservation_id
      - username
      - version_hash
      - version_type
      type: object
      properties:
        reservation_id:
          type: string
        billable_to:
          type: string
        billable_to_uuid:
          type: string
        algoname:
          type: string
        username:
          type: string
        version_type:
          type: string
        num_slots:
          type: integer
        algo_id:
          type: string
        algorithm_id:
          type: string
        version_hash:
          type: string
      description: Sticky slot reservation for an algorithm
    ReservationCreate:
      required:
      - algoname
      - calling_user
      - num_slots
      - username
      - version_type
      type: object
      properties:
        username:
          type: string
        algoname:
          type: string
        calling_user:
          type: string
        version_type:
          type: string
        num_slots:
          type: integer
        version_identifier:
          type: string
      description: Create reservation object
    ResourceName:
      maxLength: 30
      pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
      type: string
    ScmConfiguration:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
          writeOnly: true
        project_key:
          type: string
      description: Information necessary to support SCM (source code management) providers
        that must authorize users via OAuth.
    ScmConfigurationRequestDto:
      required:
      - provider
      - urls
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
          default: true
        name:
          type: string
        provider:
          type: string
          enum:
          - internal
          - github
          - gitlab
          - bitbucket
          - bitbucket-cloud
        scm:
          $ref: '#/components/schemas/ScmBitbucketConfiguration'
        oauth:
          $ref: '#/components/schemas/ScmOAuthConfiguration'
        urls:
          $ref: '#/components/schemas/ScmUrls'
      description: Represents new SCM integration.
    ScmConfigurationResponseDto:
      required:
      - id
      - provider
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
          default: true
        name:
          type: string
        default:
          type: boolean
          readOnly: true
        provider:
          type: string
          enum:
          - internal
          - github
          - gitlab
          - bitbucket
          - bitbucket-cloud
        scm:
          $ref: '#/components/schemas/ScmConfiguration'
        urls:
          $ref: '#/components/schemas/ScmUrls'
      description: "Represents a single SCM integration. The `scm` fields returns\
        \ the ScmBitbucketConfiguration only on create requests, on all other requests\
        \ it is mapped into `ScmOAuthConfiguration` because we can't tell between\
        \ the two based on DB data."
    ScmConnectionStatus:
      type: object
      properties:
        scm_connection_status:
          type: string
          readOnly: true
          enum:
          - active
          - deploy_key_error
          - provider_internal_error
        repository_public_deploy_key:
          type: string
          readOnly: true
        repository_webhook_secret:
          type: string
          readOnly: true
        repository_webhook_url:
          type: string
          readOnly: true
    ScmOAuthConfiguration:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
          writeOnly: true
      description: Information necessary to support SCM (source code management) providers
        that must authorize users via OAuth.
    ScmBitbucketConfiguration:
      type: object
      properties:
        project_key:
          type: string
      description: Information necessary to support Bitbucket Server integration.
    SCMSUserPass:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      description: Credentials for authentication in SCM (source code management)
        system
    SCMSSecretToken:
      required:
      - secretToken
      type: object
      properties:
        secretToken:
          type: string
      description: Credentials for authentication in SCM (source code management)
        system
    ScmUpdateRequest:
      type: object
      properties:
        enabled:
          type: boolean
        urls:
          $ref: '#/components/schemas/ScmUrls'
    ScmUrls:
      required:
      - api
      - ssh
      - web
      type: object
      properties:
        web:
          type: string
        api:
          type: string
        ssh:
          type: string
      description: "Information necessary to support SCM (source code management)\
        \ endpoints for Oauth, viewing source, making API calls, and cloning Git repositories\
        \ via SSH.\nThe `web` URL should point to the website for the GitHub/GitLab/Bitbucket\
        \ instance you wish to use. For example, `https://github.com` for public GitHub.\
        \ Should be filled with the value from the `api` field.\nThe `api` URL should\
        \ point to the base API endpoint for the GitHub/GitLab/Bitbucket instance\
        \ you wish to use. For example, `https://api.github.com` for public GitHub.\
        \ Note that GitHub Enterprise places the API under a path, e.g. `https://my-ghe-instance.com/api/v3`.\
        \ For Bitbucket, this is the only Server URL we need ex. `https://my-bitbucket-server.com`\n\
        The `ssh` URL should be of the format `ssh://git@server.com`, replacing `server.com`\
        \ with the custom domain for your GitHub/GitLab/Bitbucket instance. For Bitbucket,\
        \ this field needs the following format: `ssh://git@my-bitbucket-server.com`.\
        \ If the user supplied a custom SSH server address, ex `custom-domain.com:5000`,\
        \ then this needs to be adjusted to `ssh://git@custom-domain.com:5000`\n"
    ScmUserOAuthStatus:
      type: object
      properties:
        authorization_status:
          type: string
          enum:
          - authorized
          - unauthorized
        scm_username:
          type: string
        scm_organizations:
          type: array
          items:
            type: object
            properties:
              scm_org_username:
                type: string
              access_level:
                type: string
      description: Information about a user's authorization status for the given SCM
        configuration.
    Settings:
      type: object
      properties:
        algorithm_callability:
          $ref: '#/components/schemas/AlgorithmCallability'
        source_visibility:
          $ref: '#/components/schemas/SourceVisibility'
        environment:
          $ref: '#/components/schemas/Environment'
        package_set:
          type: string
        algorithm_environment:
          type: string
          description: the environment id (not the environment specification id) returned
            from AEMS
          format: uuid
        license:
          $ref: '#/components/schemas/License'
        royalty_microcredits:
          minimum: 0
          type: integer
          readOnly: true
        network_access:
          $ref: '#/components/schemas/NetworkAccess'
        pipeline_enabled:
          type: boolean
    SecretProviderRequest:
      required:
      - description
      - factoryClassName
      - interfaceVersion
      - isDefault
      - isEnabled
      - moduleName
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        moduleName:
          type: string
        factoryClassName:
          type: string
        interfaceVersion:
          type: string
        configuration:
          type: object
          properties:
            key:
              type: string
        isEnabled:
          type: boolean
        isDefault:
          type: boolean
    SettingsMandatory:
      required:
      - license
      - network_access
      - pipeline_enabled
      - source_visibility
      type: object
      properties:
        source_visibility:
          $ref: '#/components/schemas/SourceVisibility'
        language:
          $ref: '#/components/schemas/Language'
        environment:
          $ref: '#/components/schemas/Environment'
        package_set:
          type: string
        algorithm_environment:
          type: string
          description: the environment id (not the environment specification id) returned
            from AEMS
          format: uuid
        license:
          $ref: '#/components/schemas/License'
        royalty_microcredits:
          minimum: 0
          type: integer
          readOnly: true
        network_access:
          $ref: '#/components/schemas/NetworkAccess'
        pipeline_enabled:
          type: boolean
    SettingsPublish:
      type: object
      properties:
        algorithm_callability:
          $ref: '#/components/schemas/AlgorithmCallability'
        source_visibility:
          $ref: '#/components/schemas/SourceVisibility'
        license:
          $ref: '#/components/schemas/License'
        royalty_microcredits:
          minimum: 0
          type: integer
        network_access:
          $ref: '#/components/schemas/NetworkAccess'
        pipeline_enabled:
          type: boolean
    Source:
      required:
      - scm
      type: object
      properties:
        repository_name:
          type: string
          description: The name of the repo that will be created in the chosen SCM
            system.
          readOnly: true
        repository_owner:
          type: string
          description: The ID of the relevant owner as stored by the SCM system in
            use.
          readOnly: true
        repository_https_url:
          type: string
          readOnly: true
        repository_ssh_url:
          type: string
          readOnly: true
        scm:
          $ref: '#/components/schemas/ScmConfigurationResponseDto'
      description: "Represents information about how the algorithm's source code is\
        \ managed. Upon algorithm creation, the `scm` property is set to the currently\
        \ enabled default SCM (source code management) configuration for the cluster."
    SourceCreate:
      required:
      - scm
      type: object
      properties:
        repository_name:
          type: string
        repository_owner:
          type: string
        scm:
          type: string
        initial_commit_message:
          type: string
        existing_repository_name:
          type: string
      description: Describes properties of the Source schema that may be provided
        at algorithm creation time.
    SourceVisibility:
      type: string
      description: "For algorithms hosting source code within the Algorithmia platform,\
        \ this determines if users other than the algorithm owner will be able to\
        \ view (but not edit) the algorithm's source code. For algorithms hosting\
        \ their source code on external repository host, this value will determine\
        \ if the repository is initially created as a private repository (e.g. `closed`)\
        \ or if it will be public (e.g. `open`). Note that, once you've created an\
        \ algorithm using an external repository host like GitHub, Gitlab or Bitbucket,\
        \ any updates to its source visibility must be made via the repository host\
        \ itself (e.g. via the SCM UI or API).\n"
      enum:
      - open
      - closed
    UpdateRequest:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/Details'
        settings:
          $ref: '#/components/schemas/Settings'
        version_info:
          type: object
          properties:
            sample_input:
              type: string
    User:
      required:
      - email
      - resource_type
      - username
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 36
          type: string
        fullname:
          maxLength: 100
          type: string
        email:
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$"
          type: string
        username:
          maxLength: 30
          pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
          type: string
        company_name:
          maxLength: 100
          type: string
        company_role:
          maxLength: 200
          type: string
        self_link:
          type: string
          readOnly: true
        resource_type:
          type: string
          readOnly: true
    VersionInfo:
      type: object
      properties:
        semantic_version:
          type: string
          readOnly: true
        git_hash:
          type: string
          readOnly: true
        version_uuid:
          type: string
          readOnly: true
        release_notes:
          type: string
        sample_input:
          type: string
        sample_output:
          type: string
          readOnly: true
        insights_enabled:
          type: boolean
    VersionInfoPublish:
      type: object
      properties:
        version_type:
          $ref: '#/components/schemas/VersionType'
        release_notes:
          type: string
          writeOnly: true
        sample_input:
          type: string
          writeOnly: true
        sample_output:
          type: string
          writeOnly: true
        insights_enabled:
          type: boolean
          default: false
    VersionRequest:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/Details'
        settings:
          $ref: '#/components/schemas/SettingsPublish'
        version_info:
          $ref: '#/components/schemas/VersionInfoPublish'
        registry_push_credentials:
          $ref: '#/components/schemas/RegistryPublishAuth'
    VersionResponse:
      type: object
      properties:
        name:
          type: string
        details:
          $ref: '#/components/schemas/Details'
        settings:
          $ref: '#/components/schemas/Settings'
        source:
          $ref: '#/components/schemas/Source'
        version_info:
          $ref: '#/components/schemas/VersionInfo'
        build:
          $ref: '#/components/schemas/Build'
        compilation:
          $ref: '#/components/schemas/Compilation'
        self_link:
          type: string
          readOnly: true
        resource_type:
          type: string
          readOnly: true
    VersionType:
      type: string
      writeOnly: true
      enum:
      - major
      - minor
      - revision
  responses:
    AlgorithmHostUsernameResponse:
      description: Algorithm Host Username List
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AlgorithmHostUsername'
    AlgorithmImagePushStatusResponse:
      description: Algorithm Image Push Status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImagePushStatus'
    AlgorithmInvocationResultResponse:
      description: Returns the result of invoking an algorithm.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmInvocationResult'
    AlgorithmUsageResponse:
      description: Algorithm usage information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmUsageResult'
    LegacyAlgorithmUsageResponse:
      description: Legacay Algorithm usage information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LegacyAlgorithmUsageResult'
    ApiKeyListResponse:
      description: List of API keys
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeyList'
    AlgorithmListResponse:
      description: Returns a list of utility algorithms
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmListResult'
    AlgorithmSecretListResponse:
      description: Returns a list of AlgorithmSecrets.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmSecretList'
    AlgorithmSecretResponse:
      description: A secret object without the value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmSecretResult'
    OrganizationTypeListResponse:
      description: List of OrganizationType
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationTypeListResult'
    BuildLogsResponse:
      description: Build Logs Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BuildLogs'
    BuildResponse:
      description: Build Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Build'
    ConnectionConfigurationResponse:
      description: Response containing a Connection Configuration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectionConfiguration'
    AlgorithmErrorListResponse:
      description: List of algorithm errors response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmErrorEntry'
    CreateApiKeyResponse:
      description: Response containing a generated API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKey'
    ConnectorResponse:
      description: Response containing a Connector
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorResponse'
    Error:
      description: Error response for all non-200 response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/Error'
    EventListener:
      description: Event Listener Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventListener'
    FeatureFlagListResponse:
      description: Response with feature flag list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeatureFlagList'
    FileDeletionResponse:
      description: "Returns the number of successful deletions under `result`, and\
        \ number of failed deletions under `error`"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  deleted:
                    type: number
              result:
                type: object
                properties:
                  deleted:
                    type: number
    FileOrDirectoryResponse:
      description: "Returns either a `directory` or raw file data, depending on path\
        \ specified"
      headers:
        X-Data-Type:
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/FileType'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Directory'
        '*/*':
          schema:
            type: string
            format: binary
    FileOrDirectoryCreationResponse:
      description: Describes the location of a successfully uploaded file
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: string
    FrontendConfigurationEntry:
      description: Front-end config representation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FrontendConfigurationEntry'
    FullUsageResultResponse:
      description: Full usage report response to caller
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FullUsageResult'
    HashResponse:
      description: "Create, Update Response"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HashResponse'
    InviteCodeResponse:
      description: Invite code response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InviteCode'
    ListProviderInfoResponse:
      description: Provider Info response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProviderInfo'
    NotificationContextResponse:
      description: Notification response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NotificationContext'
    Organization:
      description: Organization response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Organization'
    OrganizationHostInformation:
      description: OrganizationHostInformation response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationHostInformation'
    OrganizationType:
      description: OrganizationType response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationType'
    PagedBuildsListResponse:
      description: Builds Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedBuildsList'
    PagedResultList:
      description: Response for all paginated list apis
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedResultList'
    PagedVersionsListResponse:
      description: "Create, Update Response"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedVersionsList'
    ProviderInfoResponse:
      description: Provider Info response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProviderInfo'
    RegistryResponse:
      description: A configured registry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryWithoutAuth'
    RegistryNoAuthListResponse:
      description: A list of all registries
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RegistryWithoutAuth'
    RepositoryCommitLogResponse:
      description: Log of commits to a repository
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RepositoryCommitLog'
    ReservationsResponse:
      description: Reservations response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Reservation'
    ScmConnectionStatusResponse:
      description: Returns information about an algorithm's connection to its backing
        SCM provider.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScmConnectionStatus'
    ScmListResponse:
      description: Returns a list of SCMs.
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/components/schemas/ScmConfigurationResponseDto'
    ScmResponse:
      description: Returns a single SCM
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScmConfigurationResponseDto'
    ScmUserOAuthStatusResponse:
      description: Returns information about a user's authorization status for the
        given SCM configuration.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScmUserOAuthStatus'
    ScmWebhookIgnoredResponse:
      description: The incoming webhook is not actionable
      content:
        application/json:
          schema:
            type: object
            properties:
              reason:
                type: string
    User:
      description: User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UserUsageResponse:
      description: User usage information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUsageResult'
    VersionResponse:
      description: Publish Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VersionResponse'
  parameters:
    aclQueryParameter:
      name: acl
      in: query
      description: Whether the ACL should be included in the response.
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        default: false
    algoHashParam:
      name: algohash
      in: path
      description: Algorithm hash
      required: true
      style: simple
      explode: false
      schema:
        type: string
    algoIdParam:
      name: algorithmId
      in: path
      description: Algorithm UUID
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
        type: string
        format: uuid
    algoParam:
      name: algoname
      in: path
      description: Algorithm name
      required: true
      style: simple
      explode: false
      schema:
        type: string
    algoCallableVersionParam:
      name: algoCallableVersion
      in: path
      description: "The specific version of the algorithm you wish to call. May be\
        \ left blank, in which case the latest publicly published version will be\
        \ used.\nExamples:\n- `latestPrivate`: Resolves to the latest version you\
        \ have published privately.\n- `06147a5f7726757845d04d5b24b6e2b1c797fc74`:\
        \ Resolves to a specific hash version of your algorithm. Useful for testing\
        \ a specific algorithm build.\n- `1.1.1`: Fully specified semantic version.\n\
        - `1.2.*`: Specified to the minor version level. Will resolve to the latest\
        \ publicly published version with minor version of 1.2.\n- `1.*`:\tSpecified\
        \ to the major version level. Will resolve to the latest publicly published\
        \ version with major version of 1.\n"
      required: true
      style: simple
      explode: false
      schema:
        pattern: "(^$|latestPrivate|^[a-z0-9]?$|^\\d(\\.(\\d+|\\*))?(\\.(\\d+|\\*))?$)"
        type: string
    buildId:
      name: buildid
      in: path
      description: Build ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    callableParam:
      name: callable
      in: query
      description: Algorithm version's callable visibility
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    commitHashParam:
      name: commitHash
      in: path
      description: Algorithm commit hash
      required: true
      style: simple
      explode: false
      schema:
        type: string
    configKeyParam:
      name: keyname
      in: path
      description: The keyname for the config map entry
      required: true
      style: simple
      explode: false
      schema:
        maxLength: 64
        pattern: "^[\\w][\\w-.]*[\\w]$"
        type: string
    connectorIdParameter:
      name: connectorId
      in: path
      description: "Specifies the connector you wish to interact with.\nFor Algorithmia-hosted\
        \ data, simply supply `data`. Otherwise, provide your connector's ID. A connector's\
        \ ID is represented as its connector type, the `+` character, and its label\
        \ (unless it is the default connector for its type, see below.) Thus, a non-default\
        \ S3 connector with the label \"test\" would be identified as \"s3+test\"\
        .\nYou can use your default connector for a given storage provider by passing\
        \ the following identifiers:\n- `azureblob`: Your default Azure Blob connector.\n\
        - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your\
        \ Algorithmia instance.\n- `gs`: Your default Google Cloud Storage connector.\n\
        - `s3`: Your default AWS S3 connector.\n"
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^(azureblob|data|dropbox|gs|s3){1}(\\+[a-zA-Z0-9]+)?$"
        type: string
    connectorPathParameter:
      name: connectorPath
      in: path
      description: Describes the file path you wish to operate on within your chosen
        data connector.
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^([^\\/]+\\/?)*$"
        type: string
    eventListenerIdParam:
      name: eventListenerId
      in: path
      description: The ID of an event listener
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
        type: string
    featureNameParam:
      name: featureName
      in: path
      description: The name of the feature flag
      required: true
      style: simple
      explode: false
      schema:
        type: string
    forceDeletionQueryParameter:
      name: force
      in: query
      description: "If you pass `true` for this parameter, will delete the directory\
        \ even if it contains files."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    limitParam:
      name: limit
      in: query
      description: The number of results to return in a single page
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
    markerParam:
      name: marker
      in: query
      description: Encoded pagination cursor
      required: false
      style: form
      explode: true
      schema:
        type: string
    oauthAuthorizationCodeParam:
      name: code
      in: query
      description: OAuth authorization code which we will be exchanged for an access
        token.
      required: true
      style: form
      explode: true
      schema:
        type: string
    orgnameParam:
      name: orgName
      in: path
      description: Organization name
      required: true
      style: simple
      explode: false
      schema:
        maxLength: 30
        pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
        type: string
    orgTypeNameParam:
      name: orgTypeName
      in: path
      description: Organization Type name
      required: true
      style: simple
      explode: false
      schema:
        maxLength: 30
        pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
        type: string
    providerIdParam:
      name: providerId
      in: path
      description: Secret UUID
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
        type: string
    publishedParam:
      name: published
      in: query
      description: Algorithm version's published state
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    registryIdParam:
      name: registryId
      in: path
      description: Registry ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    scmIdParam:
      name: scmId
      in: path
      description: SCM ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    secretIdParam:
      name: secretId
      in: path
      description: Secret UUID
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
        type: string
    sinceSha:
      name: since
      in: query
      description: The first commit SHA of the repository to list in the commits.
        This is included in the result list.
      required: false
      style: form
      explode: true
      schema:
        type: string
    untilSha:
      name: until
      in: query
      description: The last commit SHA of the repository to list in the commits. This
        is included in the result list.
      required: false
      style: form
      explode: true
      schema:
        type: string
    userIdParam:
      name: userId
      in: path
      description: The user's ID
      required: true
      style: simple
      explode: false
      schema:
        pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
        type: string
    usernameParam:
      name: username
      in: path
      description: The username of the user or organization
      required: true
      style: simple
      explode: false
      schema:
        maxLength: 30
        pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
        type: string
    usernameQueryParam:
      name: username
      in: query
      description: The username of the user or organization
      required: false
      style: form
      explode: true
      schema:
        type: string
  requestBodies:
    BuildRequest:
      description: A build request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BuildRequest'
      required: true
    ConnectionConfigurationRequestBody:
      description: A connection configuration that maps to a SASL configuration or
        a Plain Text Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectionConfigurationRequest'
    ConnectorCreateRequestBody:
      description: Attempting to create a data connector for a specific user or organization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Connector'
    CreateApiKey:
      description: Create API Key Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeyCreation'
      required: true
    CreateOrgApiKey:
      description: Create API Key for an Organization Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationApiKeyCreation'
      required: true
    CreateRegistryRequest:
      description: Parameters to create a new registry for mirroring
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryCreate'
      required: true
    UpdateRegistryRequest:
      description: Parameters to update a new registry for mirroring
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryUpdate'
      required: true
    CreateRequest:
      description: Algorithm Create Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRequest'
      required: true
    DirectoryAclRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectoryAclUpdateRequest'
    CreateDirectoryRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDirectoryRequest'
    EventListenerBody:
      description: Request with event listener
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventListenerRequest'
      required: true
    FeatureFlagToggle:
      description: Feature flag toggle
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeatureFlagToggle'
      required: true
    FileUploadRequestBody:
      content:
        '*/*':
          schema:
            type: string
            format: binary
    FrontendConfigurationEntry:
      description: Request with config entry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FrontendConfigurationEntry'
      required: true
    InviteCodeRequestBody:
      description: Request to create new invite code
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewInviteCode'
      required: true
    Organization:
      description: Request with Organization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Organization'
      required: true
    OrganizationHostInformation:
      description: Request with organization host information mapping
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationHostInformation'
      required: true
    CreateOrganizationHostInformation:
      description: Request to create new organization host information mapping
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateOrganizationHostInformation'
      required: true
    OrganizationType:
      description: Request with OrganizationType
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationType'
      required: true
    RegistryPublishAuthRequestBody:
      description: Credentials for accessing an external docker registry
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryPublishAuth'
      required: false
    ReservationCreateRequestBody:
      description: Create a reservation for an algorithm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReservationCreate'
      required: true
    ScmCreateRequestBody:
      description: "Attempting to create an SCM configuration of the type `internal`\
        \ will return an `ScmDisallowedOperationError`, as this is a special class\
        \ of SCM leveraged by Algorithmia directly."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScmConfigurationRequestDto'
      required: true
    ScmUpdateRequestBody:
      description: "The enabled property or the scmUrls may be updated. If you attempt\
        \ to disable an SCM that is currently the default, this call will fail, and\
        \ you will be returned an appropriate error code. You must pass all 3 valid\
        \ scmUrls or none"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScmUpdateRequest'
      required: true
    ScmWebhookRequestBody:
      description: Contains information for the event that triggered this webhook
      content:
        application/json:
          schema:
            type: object
      required: true
    AlgorithmSecretCreateRequestBody:
      description: Algorithm Secret Create Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmSecretCreateRequest'
      required: true
    AlgorithmSecretEditRequestBody:
      description: Algorithm Secret Edit Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmSecretEditRequest'
      required: true
    SecretProviderRequestBody:
      description: Request for creating and updating secret providers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretProviderRequest'
    UpdateRequest:
      description: Algorithm Update Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateRequest'
      required: true
    HostUpdateRequestBody:
      description: AlgorithmHostUsername Update Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlgorithmHostUsernameUpdates'
      required: true
    User:
      description: Request with User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    VersionRequest:
      description: Publish Version Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VersionRequest'
      required: true
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: "ALGO_SESSION{cookieNameSuffix}"
      in: cookie
    AdminApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
    GithubAuth:
      type: apiKey
      name: X-Hub-Signature
      in: header
    GithubEventIdentification:
      type: apiKey
      name: X-GitHub-Event
      in: header
    XGitlabEvent:
      type: apiKey
      name: X-Gitlab-Event
      in: header
    XBitbucketKey:
      type: apiKey
      name: X-Event-Key
      in: header
